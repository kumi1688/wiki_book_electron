[
    {
        "title": "데이터 통신 프로그래밍 개요",
        "contents": [
            {
                "text": [
                    "이번 장에서는 데이터 전송을 담당하는 네트워크 부분을 집중적으로 살펴 본다"
                ],
                "img": [
                    "진입.PNG"
                ]
            }
        ]
    },
    {
        "title": "데이터 통신 프로그래밍이란?",
        "contents": [
            {
                "text": [
                    "데이터 통신 프로그래밍은 센서와 모듈에서 수집 한 정보를 미들웨어를 통해 다른 모듈로 전송하는 것을 뜻한다.",
                    "일반적인 웹 서비스의 경우 HTTP 프로토콜을 이용한 통신을 이용해도 충분할 것이다. 하지만 막대한 데이터가 실시간으로 들어오는 IoT 서비스의 경우 HTTP 프로토콜을 이용해 데이터를 전송하는 것은 어려울 수 있다. 부족하지도, 과하지도 않은 적절한 데이터 통신 프로토콜을 설정하는 것이 중요하다.",
                    "그렇다면 어떤 상황에서 어떤 데이터 통신 방식을 사용해야 할까?"
                ]
            }
        ]
    },
    {
        "title": "미들 웨어",
        "contents": [
            {
                "text": [
                    "데이터 통신 방식을 살펴보기 전에 모듈간 데이터 통신을 도와주는 미들웨어에 대해 간단하게 알아보자.",
                    "미들웨어는 송신, 수신 모듈을 연결하여 데이터를 주고 받을 수 있도록 중간에서 매개 역할을 하는 소프트웨어이다",
                    "미들웨어를 사용하기만 한다면 복잡한 데이터 통신을 맡아주기 때문에 개발자는 서비스 개발에만 집중할 수 있게 된다."
                ]
            },
            {
                "code": {
                    "name": "미들웨어.txt",
                    "lang": "javascript"
                },
                "text": [
                    "위의 코드는 Node.Js의 express 모듈이 body-parser 미들웨어를 사용하는 모습이다.",
                    "REST API의 PUT, POST method의 경우 body에 데이터가 실려오는데 express 모듈은 이를 인지하지 못한다. 하지만 body-parser라는 미들웨어를 사용할 경우 body를 인지할 수 있고 body 안의 데이터를 확인 할 수 있게 된다",
                    "HTTP 패킷의 body를 해석하는 모듈을 따로 개발하려면 적잖은 노력이 들어가겠지만 이처럼 미들웨어를 적용하기만 해도 개발자는 body를 확인할 수 있으므로 시간을 절약할 수 있다"
                ]
            }
        ]
    },
    {
        "title": "미들웨어 종류",
        "contents": [
            {
                "img": [
                    "미들웨어2.PNG"
                ],
                "text": [
                    "미들웨어는 그 용도와 목적에 따라 다양한 종류로 나뉘지만 이번에 살펴볼 미들웨어는 MOM 타입의 미들웨어이다.",
                    "MOM 타입의 미들웨어는 응용 프로그램간의 통신을 메시지로 수행한다. 즉 메시지를 전달하고 받는 쪽에 특화되어 있다"
                ]
            }
        ]
    },
    {
        "title": "MOM",
        "contents": [
            {
                "img": [
                    "미들웨어3.PNG"
                ],
                "text": [
                    "MOM는 위의 그림에 나와있듯이 대용량 데이터 또는 실시간 데이터 처리에 적합하다. MOM의 가장 큰 특징은 단말끼리 직접 메시지를 주고 받는 것이 아니라 Broker라는 중재자가 메시지의 흐름을 중재한다는 것이다.",
                    "Broker는 자신에게 도착한 메시지의 특성과 목적을 파악해 올바른 단말로 도달 할 수 있도록 돕는다. 또한 도착한 메시지들은 Queue에 담아 놓는데 이를 Message Queue라고 한다",
                    "이렇듯 메시지의 전달을 Broker가 전담하기 때문에 각 단말은 메시지를 Broker에 전달 한 뒤 메시지가 올바르게 전달되었는지 신경 쓰지 않고 자신의 일에 전념할 수 있게 된다. Broker가 메시지를 알아서 전달해 줄 것이기 때문이다"
                ]
            }
        ]
    },
    {
        "title": "동기 방식의 문제점",
        "contents": [
            {
                "img": [
                    "동기1.PNG"
                ],
                "text": [
                    "먼저 동기 방식의 문제점을 살펴보자. App1에서 DB와 연동하려면 App2와 통신해야 한다. 하지만 App2 혹은 DB가 죽어버리면 이와 연동된 App1은 자연스럽게 같이 죽게된다. 요청에 대한 응답을 받아야 다음 작업을 수행할 수 있기 때문이다. 요청에 대한 응답이 돌아올 때 까지 기다리는 것이 동기방식이다"
                ]
            }
        ]
    },
    {
        "title": "비동기 방식",
        "contents": [
            {
                "img": [
                    "동기2.PNG"
                ],
                "text": [
                    "이제 동기 방식의 문제를 해결할 수 있는 비동기 방식을 살펴보자. 이제 App1 은 App2와 직접 통신하지 않고 메시지 미들웨어를 통해 통신한다. App1은 App2와 데이터를 주고 받지만 어떤 장애가 발생해 App2가 중단되어도 자신은 죽지 않는다. 요청에 대한 응답을 더 이상 기다리지 않기 때문이다. 응답을 받지 못했을 때의 예외처리만 한다면 App1은 큰 문제 없이 작동할 것이다"
                ]
            },
            {
                "img": [
                    "동기3.PNG"
                ],
                "text": [
                    "비동기 방식은 요청에 대한 응답을 기다리지 않으며, 요청에 대한 응답을 늦게 나마 보내고, 요청과 응답을 언제든 받아들 일 수 있는 방식임을 알 수 있다"
                ]
            },
            {
                "img": [
                    "동기4.PNG"
                ],
                "text": [
                    "이렇듯 최근 소프트웨어는 다양한 모듈간의 통신을 전제하기 때문에 하나의 모듈이 중단되었을 때 다른 모듈까지 연달아 중단되는 일을 막을 수 있는 비동기 방식으로 전환되고 있다."
                ]
            }
        ]
    }
]